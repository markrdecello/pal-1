<?php

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Rooms;
use App\User;
use Validator;

class RoomController extends Controller
{

    public function joinRoom($id, $user_id){

		$room = Rooms::find($id);
		$room->save();
		$user = User::find($user_id);


		if($user->role == 0){
			if($room->counselor_id == 0){
			  $room->student_id = $user->id * -1;
			}
			else{
			  $room->student_id = $user->id;
			}
		}
		else if($user->role > 0){
			if($room->student_id == 0){
				$room->counselor_id = $user->id * -1;
			}
			else{
				$room->counselor_id = $user->id;
			}
		}

		$room->save();

		return $room;

	}

	public function leaveRoom($id, $user_id){

		$room = Rooms::find($id);
		$room->message_last = null;
		$user = User::find($user_id);

		if($user->role == 0){
			$room->student_id = 0;
		}
		else if($user->role > 0){
			$room->counselor_id = 0;
		}

		$room->save();


		return $room;
	}

	public function findRoom($id){

		$user = User::find($id);
		if($user->role > 0){
			$data = Rooms::where("counselor_id", -1 * $id)->orWhere("counselor_id", $id)->get();
		}
		else{
			$data = Rooms::where("student_id", -1 * $id)->orWhere("student_id", $id)->get();
		}

		if(!($data->count() > 0)){
			$data = array(array('id' => 0));
		}

		return $data;

	}

	public function findRoomCounselor($id){

		$user = User::where("counselor_id", $id)->where("role", 1)->get();
		$user = $user[0];
		$user_id = $user->id;
		$data = Rooms::where("counselor_id", -1 * $id)->orWhere("counselor_id", $id)->get();

		$ph[0] = array('id' => 0);
		$index = 0;
		for($x = 0; $x < count($data); $x++){
		   $c = $data[$x]['created_at'];
		   $d = $data[$x]['updated_at'];
	           unset($data[$x]['created_at']);
    		   unset($data[$x]['updated_at']);
	   	   $ph[$x] = $data[$x];
		   $user_s = User::find($data[$x]->student_id);
		   if(count($user_s) > 0){
			$ph[$x]["student_name"] = $user_s->name;
		   }
		   else{
		   	$ph[$x]["student_name"] = null;
		   }

	   	   $ph[$x]["counselor_name"] = $user->name;
		   $ph[$x]["created_at"] = $c;
		   $ph[$x]["updated_at"] = $d;
	 	}

	 	$data = $ph;

		return $data;

	}


	public function sendMessage(Request $request){
		$validator = Validator::make($request->all(), [
			"message" => "required",
			"chat_id" => "required",
			"student_id" => "required",
			"counselor_id" => "required",
			"role" => "required"
		]);

		if ($validator->fails()) {
			$messages = $validator->errors();
			$arr = array("status" => 0, "message" => $messages->first());

			return json_encode($arr);
		}
		else {
			$room = Rooms::find($request->chat_id);
			$room->student_id = $request->student_id;
			$room->counselor_id = $request->counselor_id;

			if($request->role > 0){
				$room->message_last = $request->message;
				if($room->counselor_id > 0){
					$room->counselor_id *= -1;
				}

				if($room->student_id < 0){
					$room->student_id *= -1;
				}

			}
			else if($request->role == 0){
				$room->message_last = $request->message;
				if($room->student_id > 0){
					$room->student_id *= -1;
				}

				if($room->counselor_id < 0){
					$room->counselor_id *= -1;
				}

			}
			else{
				$arr = array("status" => 0, "message" => "User not found in this chat");
				return json_encode($arr);
			}

			$room->save();

			return $room;
		}

	}

	public function getMessage($id){
		$room = Rooms::find($id);
		if($room->message_last != null){
			return $room;
		}
	}

	public function emptyRoom($id){
		$room = Rooms::find($id)->delete();
		$room = new Rooms;
		$room->id = $id;
		$room->student_id = 0;
		$room->counselor_id = 0;
		$room->message_last = null;
		$room->save();

		$arr = array("status" => 1, "message" => "Room is now empty.");
		return json_encode($arr);
	}

	public function isNewMessage($id){
		$user = User::find($id);
		$ph;

		//check user if its in the table
		$c_id = Rooms::where("counselor_id", -1 * $id)->get()->count();
		$s_id = Rooms::where("student_id", -1 * $id)->get()->count();

		if($c_id + $s_id == 0){
			$arr = array("status" => 1, "message" => "No. Just no. T_T");

			return json_encode($arr);
		}

		if($user->role > 0){
			$user_id = Rooms::where("counselor_id", -1 * $id)->get();
		}
		else{
			$user_id = Rooms::where("student_id", -1 * $id)->get();
		}

		return $user_id;

	}

	public function knock($id){
		$room = Rooms::find($id);

		return $room;

		if($room->student_id == 0 && $room->counselor_id == 0){
			$arr = array("status" => 1, "message" => $x);
		}
		else{
			$arr = array("status" => 0, "message" => $x);
		}

		return $arr;
	}

	public function knockAll(){
		$data = null;
		$rooms = Rooms::all();
		$index = 0;

		for($x = 0; $x < count($rooms); $x++){
			if($rooms[$x]->student_id == 0 && $rooms[$x]->counselor_id == 0){
				$data[$index] = array("status" => 1, "message" => $x + 1);
				$index++;
			}
		}

		if($data == null){
			return array("status" => 0, "message" => "All rooms are full...");
		}


		return $data;
	}
}